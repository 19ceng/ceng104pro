<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Tutorial</title>
<link rel='stylesheet' href='/media/css/pythonware.css' type='text/css'>

</head>
<body bgcolor='white' text='black'><a name='top'></a>
<table class='masthead' border='0' cellspacing='0' cellpadding='0' width='100%'><tr><td align='left'>
<a href='/index.htm'>pythonware.com</a> <!-- [debug: 0.05s 2010-04-12 06:28:21.474967] -->
</td><td align='right'>
<a href='/products/index.htm'>products</a> <span class='mark'>:::</span>
<a href='/library/index.htm'>library</a> <span class='mark'>:::</span>
<a href='/search.htm'>search</a> <span class='mark'>:::</span>
<a href='/daily/index.htm'><b>daily Python-URL!</b></a>
</td></tr></table>

<table border='0' cellspacing='0' cellpadding='0' width='100%'>
<tr><td width='120' valign='top'>
<div class='browser'>
<p><a href='../../..'>Library</a></p><p><a href='..'>Python Imaging Library Handbook</a></p><p><b>Tutorial :::</b></p>
<div style='padding-top: 20px'><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15_grey.gif" border="0" alt="A Django site." title="A Django site." /></a></div>
</div>
</td>
<td width='10'>&nbsp;</td>
<td width='2' class='grid'></td>
<td width='10'>&nbsp;</td>
<td valign='top'>

<h1 class='title'>Tutorial</h1>
<div class='pad'>
<p><a href="overview.htm">Prev</a>&#160;&#160;&#160;<a href="concepts.htm">Next</a></p><body><p>
</p>
<h2 id="using-the-image-class">Using the Image Class</h2>
<p>The most important class in the Python Imaging Library is the <a href="image.htm"><b>Image</b></a> class, defined in the module with
the same name. You can create instances of this class in several ways;
either by loading images from files, processing other images, or
creating images from scratch.</p>
<p>To load an image from a file, use the <b>open</b> function in
the <b>Image</b> module.</p>
<pre class="python">
&gt;&gt;&gt; import Image
&gt;&gt;&gt; im = Image.open("lena.ppm")
</pre>
<p>If successful, this function returns an <b>Image</b> object.  You
can now use instance attributes to examine the file contents.</p>
<pre class="python">
&gt;&gt;&gt; print im.format, im.size, im.mode
PPM (512, 512) RGB
</pre>
<p>The <b>format</b> attribute identifies the source of an image.
If the image was not read from a file, it is set to None.
The <b>size</b> attribute is a 2-tuple containing width and
height (in pixels). The <b>mode</b> attribute defines the number
and names of the bands in the image, and also the pixel type and
depth. Common modes are <span>"L"</span> (luminance) for
greyscale images, <span>"RGB"</span> for true colour images, and
<span>"CMYK"</span> for pre-press images.</p>
<p>If the file cannot be opened, an <b>IOError</b> exception is
raised.</p>
<p>Once you have an instance of the <b>Image</b> class, you can
use the methods defined by this class to process and manipulate the
image. For example, let's display the image we just loaded:</p>
<pre class="python">
    &gt;&gt;&gt; im.show()
</pre>
<p>(The standard version of <b>show</b> is not very efficient, since
it saves the image to a temporary file and calls the <b>xv</b> utility
to display the image. If you don't have <b>xv</b> installed, it won't
even work. When it does work though, it is very handy for debugging
and tests.)</p>
<p>The following sections provide an overview of the different
functions provided in this library.</p>
<h2 id="reading-and-writing-images">Reading and Writing Images</h2>
<p>The Python Imaging Library supports a wide variety of image file
formats.  To read files from disk, use the <a href="image.htm#image-open-function"><b>open</b></a> function in
the <b>Image</b> module.  You don't have to know the file format to
open a file.  The library automatically determines the format based on
the contents of the file.</p>
<p>To save a file, use the <a href="image.htm#image-save-method"><b>save</b></a> method of the
<b>Image</b> class. When saving files, the name becomes
important. Unless you specify the format, the library uses the
filename extension to discover which file storage format to use.</p>
<div class="example">
<b>Convert files to JPEG</b>
<pre class="python">
import os, sys
import Image

for infile in sys.argv[1:]:
    f, e = os.path.splitext(infile)
    outfile = f + ".jpg"
    if infile != outfile:
        try:
            Image.open(infile).save(outfile)
        except IOError:
            print "cannot convert", infile
</pre>
</div>
<p>A second argument can be supplied to the <b>save</b> method which
explicitly specifies a file format.  If you use a non-standard
extension, you must always specify the format this way:</p>
<div class="example">
<b>Create JPEG Thumbnails</b>
<pre class="python">
import os, sys
import Image

size = 128, 128

for infile in sys.argv[1:]:
    outfile = os.path.splitext(infile)[0] + ".thumbnail"
    if infile != outfile:
        try:
            im = Image.open(infile)
            im.thumbnail(size)
            im.save(outfile, "JPEG")
        except IOError:
            print "cannot create thumbnail for", infile
</pre>
</div>
<p>It is important to note that the library doesn't decode or load
the raster data unless it really has to. When you open a file, the
file header is read to determine the file format and extract things
like mode, size, and other properties required to decode the file,
but the rest of the file is not processed until later.</p>
<p>This means that opening an image file is a fast operation, which
is independent of the file size and compression type.  Here's a simple
script to quickly identify a set of image files:</p>
<div class="example">
<b>Identify Image Files</b>
<pre class="python">
import sys
import Image

for infile in sys.argv[1:]:
    try:
        im = Image.open(infile)
        print infile, im.format, "%dx%d" % im.size, im.mode
    except IOError:
        pass
</pre>
</div>
<h2 id="cutting-pasting-and-merging-images">Cutting, Pasting and Merging Images</h2>
<p>The <b>Image</b> class contains methods allowing you to manipulate
regions within an image. To extract a sub-rectangle from an image, use
the <a href="image.htm#image-crop-method"><b>crop</b></a>
method.</p>
<div class="example">
<b>Copying a subrectangle from an image</b>
<pre class="python">
    box = (100, 100, 400, 400)
    region = im.crop(box)
</pre>
</div>
<p>The region is defined by a 4-tuple, where coordinates are (left,
upper, right, lower). The Python Imaging Library uses a coordinate
system with (0, 0) in the upper left corner. Also note that
coordinates refer to positions between the pixels, so the region in
the above example is exactly 300x300 pixels.</p>
<p>The region could now be processed in a certain manner and pasted
back.</p>
<div class="example">
<b>Processing a subrectangle, and pasting it back</b>
<pre class="python">
    region = region.transpose(Image.ROTATE_180)
    im.paste(region, box)
</pre>
</div>
<p>When pasting regions back, the size of the region must match the
given region exactly. In addition, the region cannot extend outside
the image. However, the modes of the original image and the region
do not need to match. If they don't, the region is automatically
converted before being pasted (see the section on <a href="#colour-transforms-section"><i>Colour Transforms</i></a>
below for details).</p>
<p>Here's an additional example:</p>
<div class="example">
<b>Rolling an image</b>
<pre class="python">
def roll(image, delta):
    "Roll an image sideways"

    xsize, ysize = image.size

    delta = delta % xsize
    if delta == 0: return image

    part1 = image.crop((0, 0, delta, ysize))
    part2 = image.crop((delta, 0, xsize, ysize))
    image.paste(part2, (0, 0, xsize-delta, ysize))
    image.paste(part1, (xsize-delta, 0, xsize, ysize))

    return image
</pre>
</div>
<p>For more advanced tricks, the paste method can also take a
transparency mask as an optional argument.  In this mask, the value
255 indicates that the pasted image is opaque in that position (that
is, the pasted image should be used as is).  The value 0 means that
the pasted image is completely transparent.  Values in-between
indicate different levels of transparency.</p>
<p>The Python Imaging Library also allows you to work with the
individual bands of an multi-band image, such as an RGB image.  The
split method creates a set of new images, each containing one band
from the original multi-band image.  The merge function takes a mode
and a tuple of images, and combines them into a new image. The
following sample swaps the three bands of an RGB image:</p>
<div class="example">
<b>Splitting and merging bands</b>
<pre class="python">
r, g, b = im.split()
im = Image.merge("RGB", (b, g, r))
</pre>
</div>
<h2 id="geometrical-transforms">Geometrical Transforms</h2>
<p>The <b>Image</b> class contains methods to <b>resize</b> and
<b>rotate</b> an image. The former takes a tuple giving the new
size, the latter the angle in degrees counter-clockwise.</p>
<div class="example">
<b>Simple geometry transforms</b>
<pre class="python">
out = im.resize((128, 128))
out = im.rotate(45) # degrees counter-clockwise
</pre>
</div>
<p>To rotate the image in 90 degree steps, you can either use
the <b>rotate</b> method or the <b>transpose</b> method. The
latter can also be used to flip an image around its horizontal or
vertical axis.</p>
<div class="example">
<b>Transposing an image</b>
<pre class="python">
out = im.transpose(Image.FLIP_LEFT_RIGHT)
out = im.transpose(Image.FLIP_TOP_BOTTOM)
out = im.transpose(Image.ROTATE_90)
out = im.transpose(Image.ROTATE_180)
out = im.transpose(Image.ROTATE_270)
</pre>
</div>
<p>There's no difference in performance or result between
<b>transpose(ROTATE)</b> and corresponding <b>rotate</b>
operations.</p>
<p>A more general form of image transformations can be carried out via
the <a href="image.htm#image-transform-method"><b>transform</b></a>
method. See the reference section for details.</p>
<h2 id="colour-transforms">Colour Transforms</h2>
<p>The Python Imaging Library allows you to convert images between
different pixel representations using the convert function.</p>
<div class="example">
<b>Converting between modes</b>
<pre class="python">
    im = Image.open("lena.ppm").convert("L")
</pre>
</div>
<p>The library supports transformations between each supported mode
and the <span>"L"</span> and <span>"RGB"</span> modes. To convert
between other modes, you may have to use an intermediate image
(typically an <span>"RGB"</span> image).</p>
<h2 id="image-enhancement">Image Enhancement</h2>
<p>The Python Imaging Library provides a number of methods and
modules that can be used to enhance images.</p>
<h3 id="filters">Filters</h3>
<p>The <a href="imagefilter.htm"><b>ImageFilter</b></a> module
contains a number of pre-defined enhancement filters that can be used
with the <b>filter</b> method.</p>
<div class="example">
<b>Applying filters</b>
<pre class="python">
import ImageFilter
out = im.filter(ImageFilter.DETAIL)
</pre>
</div>
<h3 id="point-operations">Point Operations</h3>
<p>The <b>point</b> method can be used to translate the pixel values
of an image (e.g. image contrast manipulation).  In most cases, a
function object expecting one argument can be passed to the this
method.  Each pixel is processed according to that function:</p>
<div class="example">
<b>Applying point transforms</b>
<pre class="python">
# <i>multiply each pixel by 1.2</i>
out = im.point(lambda i: i * 1.2)
</pre>
</div>
<p>Using the above technique, you can quickly apply any simple
expression to an image. You can also combine the <b>point</b> and
<b>paste</b> methods to selectively modify an image:</p>
<div class="example">
<b>Processing individual bands</b>
<pre class="python">
# <i>split the image into individual bands</i>
source = im.split()

R, G, B = 0, 1, 2

# <i>select regions where red is less than 100</i>
mask = source[R].point(lambda i: i &lt; 100 and 255)

# <i>process the green band</i>
out = source[G].point(lambda i: i * 0.7)

# <i>paste the processed band back, but only where red was &lt; 100</i>
source[G].paste(out, None, mask)

# <i>build a new multiband image</i>
im = Image.merge(im.mode, source)
</pre>
</div>
<p>Note the syntax used to create the mask:</p>
<pre class="python">
    imout = im.point(lambda i: expression and 255)
</pre>
<p>Python only evaluates the portion of a logical expression as is
necessary to determine the outcome, and returns the last value
examined as the result of the expression. So if the expression
above is false (0), Python does not look at the second operand, and
thus returns 0. Otherwise, it returns 255.</p>
<h3 id="enhancement">Enhancement</h3>
<p>For more advanced image enhancement, use the classes in the <a href="imageenhance.htm"><b>ImageEnhance</b></a> module. Once
created from an image, an enhancement object can be used to quickly
try out different settings.</p>
<p>You can adjust contrast, brightness, colour balance and
sharpness in this way.</p>
<div class="example">
<b>Enhancing images</b>
<pre class="python">
import ImageEnhance

enh = ImageEnhance.Contrast(im)
enh.enhance(1.3).show("30% more contrast")
</pre>
</div>
<h2 id="image-sequences">Image Sequences</h2>
<p>The Python Imaging Library contains some basic support for image
sequences (also called <i>animation</i> formats). Supported
sequence formats include FLI/FLC, GIF, and a few experimental
formats. TIFF files can also contain more than one frame.</p>
<p>When you open a sequence file, PIL automatically loads the first
frame in the sequence. You can use the <a href="image.htm#image-seek-method"><b>seek</b></a> and <a href="image.htm#image-tell-method"><b>tell</b></a> methods to move
between different frames:</p>
<div class="example">
<b>Reading sequences</b>
<pre class="python">
import Image

im = Image.open("animation.gif")
im.seek(1) # <i>skip to the second frame</i>

try:
    while 1:
        im.seek(im.tell()+1)
        # <i>do something to im</i>
except EOFError:
    pass # <i>end of sequence</i>
</pre>
</div>
<p>As seen in this example, you'll get an <b>EOFError</b>
exception when the sequence ends.</p>
<p>Note that most drivers in the current version of the library
only allow you to seek to the <i>next</i> frame (as in the above
example). To rewind the file, you may have to reopen it.</p>
<p>The following iterator class lets you to use the for-statement
to loop over the sequence:</p>
<div class="example">
<b>A sequence iterator class</b>
<pre class="python">
class ImageSequence:
    def __init__(self, im):
        self.im = im
    def __getitem__(self, ix):
        try:
            if ix:
                self.im.seek(ix)
            return self.im
        except EOFError:
            raise IndexError # <i>end of sequence</i>

for frame in ImageSequence(im):
    # <i>...do something to frame...</i>
</pre>
</div>
<h2 id="postscript-printing">Postscript Printing</h2>
<p>The Python Imaging Library includes functions to print images,
text and graphics on Postscript printers. Here's a simple
example:</p>
<div class="example">
<b>Drawing Postscript</b>
<pre class="python">
import Image
import PSDraw

im = Image.open("lena.ppm")
title = "lena"
box = (1*72, 2*72, 7*72, 10*72) # in points

ps = PSDraw.PSDraw() # default is sys.stdout
ps.begin_document(title)

# draw the image (75 dpi)
ps.image(box, im, 75)
ps.rectangle(box) 

# draw centered title
ps.setfont("HelveticaNarrow-Bold", 36)
w, h, b = ps.textsize(title)
ps.text((4*72-w/2, 1*72-h), title) 

ps.end_document()
</pre>
</div>
<h2 id="more-on-reading-images">More on Reading Images</h2>
<p>As described earlier, the open function of the <b>Image</b> module
is used to open an image file.  In most cases, you simply pass it the
filename as an argument:</p>
<pre class="python">
im = Image.open("lena.ppm")
</pre>
<p>If everything goes well, the result is an <b>Image</b> object.
Otherwise, an <b>IOError</b> exception is raised.</p>
<p>You can use a file-like object instead of the filename.  The object
must implement <b>read</b>, <b>seek</b> and <b>tell</b> methods, and
be opened in binary mode.</p>
<div class="example">
<b>Reading from an open file</b>
<pre class="python">
fp = open("lena.ppm", "rb")
im = Image.open(fp)
</pre>
</div>
<p>To read an image from string data, use the <b>StringIO</b>
class:</p>
<div class="example">
<b>Reading from a string</b>
<pre class="python">
import StringIO

im = Image.open(StringIO.StringIO(buffer))
</pre>
</div>
<p>Note that the library rewinds the file (using <b>seek(0)</b>)
before reading the image header. In addition, seek will also be
used when the image data is read (by the load method). If the image
file is embedded in a larger file, such as a tar file, you can use
the <b>ContainerIO</b> or <b>TarIO</b> modules to access
it.</p>
<div class="example">
<b>Reading from a tar archive</b>
<pre class="python">
import TarIO

fp = TarIO.TarIO("Imaging.tar", "Imaging/test/lena.ppm")
im = Image.open(fp)
</pre>
</div>
<h3 id="controlling-the-decoder">Controlling the Decoder</h3>
<p>Some decoders allow you to manipulate the image while reading it
from a file.  This can often be used to speed up decoding when
creating thumbnails (when speed is usually more important than
quality) and printing to a monochrome laser printer (when only a
greyscale version of the image is needed).</p>
<p>The <a href="image.htm#image-draft-method"><b>draft</b></a>
method manipulates an opened but not yet loaded image so it as closely
as possible matches the given mode and size.  This is done by
reconfiguring the image decoder.</p>
<div class="example">
<b>Reading in draft mode</b>
<pre class="python">
im = Image.open(file)
print "original =", im.mode, im.size

im.draft("L", (100, 100))
print "draft =", im.mode, im.size
</pre>
</div>
<p>This prints something like:</p>
<pre class="python">
original = RGB (512, 512)
draft = L (128, 128)
</pre>
<p>Note that the resulting image may not exactly match the
requested mode and size. To make sure that the image is not larger
than the given size, use the <b>thumbnail</b> method instead.</p></body><p><a href="overview.htm">Prev</a>&#160;&#160;&#160;<a href="concepts.htm">Next</a></p>
</div>

</td></tr>
</table>

<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
<script type="text/javascript">
_uacct = "UA-578832-2";
urchinTracker();
</script>

</body>
</html>
